{"version":3,"sources":["App.tsx","InProgress.tsx","serviceWorker.ts","index.tsx"],"names":["State","itemsUrls","map","x","process","InProgress","useState","itemUrl","setItemUrl","animationRef","React","useRef","animate","Math","floor","random","length","current","requestAnimationFrame","useEffect","cancelAnimationFrame","style","padding","src","width","height","alt","leaderItems","midPackItems","bottomItems","BaseItemBox","display","ItemBox","state","INITIAL","RUNNING","SELECTED","COMPLETE","SelectedItemBox","highlight","setHighlight","interval","setInterval","clearInterval","backgroundColor","App","runState","setRunning","audioRef","createRef","onStart","resultUrl","load","play","then","setTimeout","isRunning","className","autoPlay","ref","onClick","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b660b713.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport InProgress from './InProgress';\n\nconst leaderItems: string[] = [\n  \"items/banana.png\",\n  \"items/lightning.png\",\n].map(x => process.env.PUBLIC_URL + \"/\" + x);\n\nconst midPackItems: string[] = [\n  \"items/blue-shell.png\",\n  \"items/mushroom.png\",\n  \"items/red-shell.png\",\n].map(x => process.env.PUBLIC_URL + \"/\" + x);\n\nconst bottomItems: string[] = [\n  \"items/blue-shell.png\",\n  \"items/lightning.png\",\n  \"items/star.png\",\n].map(x => process.env.PUBLIC_URL + \"/\" + x);\n\nenum State {\n  INITIAL = 0,\n  RUNNING = 1,\n  SELECTED = 2,\n  COMPLETE = 3,\n}\n\ninterface Props {\n  state: State;\n  itemUrl: string;\n}\n\nconst BaseItemBox: React.FC<{itemUrl: string}> = ({itemUrl}) => {\n  return (\n    <div style={{padding: '24px', display: 'inline-block'}}>\n      <img src={itemUrl} width=\"400\" height=\"400\" alt=\"item\" />\n    </div>\n  )\n};\n\nconst ItemBox: React.FC<Props> = ({state, itemUrl}) => {\n  switch (state) {\n    case State.INITIAL:\n      return (\n        <BaseItemBox itemUrl={process.env.PUBLIC_URL + \"/items/item-box.png\"} />\n      );\n    case State.RUNNING:\n      return (\n        <InProgress />\n      );\n    case State.SELECTED:\n      return (\n        <SelectedItemBox itemUrl={itemUrl} />\n      );\n    case State.COMPLETE:\n      return (\n        <BaseItemBox itemUrl={itemUrl} />\n      );\n  }\n};\n\nconst SelectedItemBox: React.FC<{itemUrl: string}> = ({itemUrl}) => {\n  const [highlight, setHighlight] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setHighlight(!highlight);\n    }, 150)\n    return () => clearInterval(interval);\n  })\n\n  return (\n    <div style={{padding: '24px', display: 'inline-block', backgroundColor: highlight ? 'black' : 'white'}}>\n      <img src={itemUrl} width=\"400\" height=\"400\" alt=\"item\"/>\n    </div>\n  )\n}\n\nfunction App() {\n  const [itemUrl, setItemUrl] = useState(process.env.PUBLIC_URL + \"/items/item-box.png\");\n  const [runState, setRunning] = useState(State.INITIAL);\n  const audioRef = React.createRef<HTMLAudioElement>();\n\n  const pickLeaderItem = () => leaderItems[Math.floor(Math.random() * leaderItems.length)];\n  const pickMidPackItem = () => midPackItems[Math.floor(Math.random() * midPackItems.length)];\n  const pickBottomItem = () => bottomItems[Math.floor(Math.random() * bottomItems.length)];\n\n  const onStart = (resultUrl: string) => {\n    audioRef.current?.load();\n    audioRef.current?.play().then(() => {\n      setRunning(State.RUNNING);\n      setTimeout(() => {\n        setItemUrl(resultUrl);\n        setRunning(State.SELECTED);\n\n        setTimeout(() => {\n          setRunning(State.COMPLETE);\n        }, 1700);\n      }, 3300);\n    });\n  };\n\n  const onLeader = () => {\n    onStart(pickLeaderItem());\n  };\n\n  const onMidPack = () => {\n    onStart(pickMidPackItem())\n  };\n\n  const onBottom = () => onStart(pickBottomItem());\n\n  const isRunning = () => runState === State.RUNNING || runState === State.SELECTED;\n\n  return (\n    <div className=\"App\">\n      <audio src={process.env.PUBLIC_URL + \"/roulette.opus\"} autoPlay={false} ref={audioRef} />\n      <div>\n        <ItemBox state={runState} itemUrl={itemUrl} />\n      </div>\n      <div className=\"mt-4\">\n        <button className=\"btn btn-dark mx-2\" onClick={onLeader} disabled={isRunning()}>Leader</button>\n        <button className=\"btn btn-dark mx-2\" onClick={onMidPack} disabled={isRunning()}>Mid Pack</button>\n        <button className=\"btn btn-dark mx-2\" onClick={onBottom} disabled={isRunning()}>Bottom Two</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\n\nconst itemsUrls: string[] = [\n  \"items/banana.png\",\n  \"items/blue-shell.png\",\n  \"items/lightning.png\",\n  \"items/mushroom.png\",\n  \"items/red-shell.png\",\n  \"items/star.png\",\n].map(x => process.env.PUBLIC_URL + \"/\" + x);\n\nconst InProgress = () => {\n  const [itemUrl, setItemUrl] = useState(\"items/item-box.png\");\n  const animationRef = React.useRef<number>();\n\n  const animate = () => {\n    setItemUrl(itemsUrls[Math.floor(Math.random() * itemsUrls.length)]);\n    animationRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    animationRef.current = requestAnimationFrame(() => {\n      animate();\n    });\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  });\n\n  return (\n    <div style={{padding: '24px'}}>\n      <img src={itemUrl} width=\"400\" height=\"400\" alt=\"item\" />\n    </div>\n  )\n};\n\nexport default InProgress;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}