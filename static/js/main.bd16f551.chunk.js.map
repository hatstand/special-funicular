{"version":3,"sources":["InProgress.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["itemsUrls","InProgress","useState","itemUrl","setItemUrl","animationRef","React","useRef","useEffect","current","requestAnimationFrame","animate","Math","floor","random","length","cancelAnimationFrame","src","width","height","alt","leaderItems","midPackItems","bottomItems","App","isRunning","setRunning","audioRef","createRef","onStart","resultUrl","load","play","then","setTimeout","className","autoPlay","ref","onClick","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gQAEMA,G,MAAsB,CAC1B,mBACA,uBACA,sBACA,qBACA,sBACA,mBA8BaC,EA3BI,WAAO,IAAD,EACOC,mBAAS,sBADhB,mBAChBC,EADgB,KACPC,EADO,KAEjBC,EAAeC,IAAMC,SAkB3B,OAXAC,qBAAU,WAIR,OAHAH,EAAaI,QAAUC,uBAAsB,YAN/B,SAAVC,IACJP,EAAWJ,EAAUY,KAAKC,MAAMD,KAAKE,SAAWd,EAAUe,UAC1DV,EAAaI,QAAUC,sBAAsBC,GAK3CA,MAEK,WACDN,EAAaI,SACfO,qBAAqBX,EAAaI,aAMtC,oCACE,yBAAKQ,IAAKd,EAASe,MAAM,MAAMC,OAAO,MAAMC,IAAI,WC7BhDC,EAAwB,CAC5B,mBACA,uBAGIC,EAAyB,CAC7B,uBACA,qBACA,uBAGIC,EAAwB,CAC5B,uBACA,sBACA,kBAgDaC,MA7Cf,WAAgB,IAAD,EACiBtB,mBAAS,sBAD1B,mBACNC,EADM,KACGC,EADH,OAEmBF,oBAAS,GAF5B,mBAENuB,EAFM,KAEKC,EAFL,KAGPC,EAAWrB,IAAMsB,YAMjBC,EAAU,SAACC,GAAuB,IAAD,IACrC,UAAAH,EAASlB,eAAT,SAAkBsB,OAClB,UAAAJ,EAASlB,eAAT,SAAkBuB,OAAOC,MAAK,WAC5BP,GAAW,GACXQ,YAAW,WACT9B,EAAW0B,GACXJ,GAAW,KACV,UAcP,OACE,yBAAKS,UAAU,OACb,2BAAOlB,IAAI,gBAAgBmB,UAAU,EAAOC,IAAKV,IACjD,6BACGF,EAAY,kBAAC,EAAD,MAAiB,yBAAKR,IAAKd,EAASe,MAAM,MAAMC,OAAO,MAAMC,IAAI,UAEhF,yBAAKe,UAAU,QACb,4BAAQA,UAAU,oBAAoBG,QAjB3B,WACfT,EAhB2BR,EAAYT,KAAKC,MAAMD,KAAKE,SAAWO,EAAYN,WAgCjBwB,SAAUd,GAAnE,UACA,4BAAQU,UAAU,oBAAoBG,QAd1B,WAChBT,EAnB4BP,EAAaV,KAAKC,MAAMD,KAAKE,SAAWO,EAAYN,WAgClBwB,SAAUd,GAApE,YACA,4BAAQU,UAAU,oBAAoBG,QAX3B,kBAAMT,EArBQN,EAAYX,KAAKC,MAAMD,KAAKE,SAAWO,EAAYN,WAgCnBwB,SAAUd,GAAnE,iBChDYe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd16f551.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst itemsUrls: string[] = [\n  \"items/banana.png\",\n  \"items/blue-shell.png\",\n  \"items/lightning.png\",\n  \"items/mushroom.png\",\n  \"items/red-shell.png\",\n  \"items/star.png\",\n];\n\nconst InProgress = () => {\n  const [itemUrl, setItemUrl] = useState(\"items/item-box.png\");\n  const animationRef = React.useRef<number>();\n\n  const animate = () => {\n    setItemUrl(itemsUrls[Math.floor(Math.random() * itemsUrls.length)]);\n    animationRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    animationRef.current = requestAnimationFrame(() => {\n      animate();\n    });\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current)\n      }\n    }\n  });\n\n  return (\n    <>\n      <img src={itemUrl} width=\"400\" height=\"400\" alt=\"item\" />\n    </>\n  )\n};\n\nexport default InProgress;","import React, { useState } from 'react';\nimport './App.css';\nimport InProgress from './InProgress';\n\nconst leaderItems: string[] = [\n  \"items/banana.png\",\n  \"items/lightning.png\",\n];\n\nconst midPackItems: string[] = [\n  \"items/blue-shell.png\",\n  \"items/mushroom.png\",\n  \"items/red-shell.png\",\n];\n\nconst bottomItems: string[] = [\n  \"items/blue-shell.png\",\n  \"items/lightning.png\",\n  \"items/star.png\",\n];\n\nfunction App() {\n  const [itemUrl, setItemUrl] = useState(\"items/item-box.png\");\n  const [isRunning, setRunning] = useState(false);\n  const audioRef = React.createRef<HTMLAudioElement>();\n\n  const pickLeaderItem = () => leaderItems[Math.floor(Math.random() * leaderItems.length)];\n  const pickMidPackItem = () => midPackItems[Math.floor(Math.random() * leaderItems.length)];\n  const pickerBottomItem = () => bottomItems[Math.floor(Math.random() * leaderItems.length)];\n\n  const onStart = (resultUrl: string) => {\n    audioRef.current?.load();\n    audioRef.current?.play().then(() => {\n      setRunning(true);\n      setTimeout(() => {\n        setItemUrl(resultUrl);\n        setRunning(false);\n      }, 3300);\n    });\n  };\n\n  const onLeader = () => {\n    onStart(pickLeaderItem());\n  };\n\n  const onMidPack = () => {\n    onStart(pickMidPackItem())\n  };\n\n  const onBottom = () => onStart(pickerBottomItem());\n\n  return (\n    <div className=\"App\">\n      <audio src=\"roulette.opus\" autoPlay={false} ref={audioRef} />\n      <div>\n        {isRunning ? <InProgress /> : <img src={itemUrl} width=\"400\" height=\"400\" alt=\"item\" />}\n      </div>\n      <div className=\"mt-4\">\n        <button className=\"btn btn-dark mx-2\" onClick={onLeader} disabled={isRunning}>Leader</button>\n        <button className=\"btn btn-dark mx-2\" onClick={onMidPack} disabled={isRunning}>Mid Pack</button>\n        <button className=\"btn btn-dark mx-2\" onClick={onBottom} disabled={isRunning}>Bottom Two</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}